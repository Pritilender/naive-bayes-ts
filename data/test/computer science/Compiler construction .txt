computer science	compiler construction compiler design navigation search this article does not cite any references sources please help improve this article adding citations reliable sources unsourced material may challenged and removed january compiler construction area computer science that deals with the theory and practice developing programming languages and their associated compilers the theoretical portion primarily concerned with syntax grammar and semantics programming one could say that this gives this particular area computer science strong tie with linguistics some courses compiler construction will include simplified grammar spoken language that can used form valid sentence for the purposes providing students with analogy help them understand how grammar works for programming the practical portion covers actual implementation compilers for students will typically end writing the front end compiler for simplistic teaching such micro contents lexical analysis syntax analysis history subfields notes references see also further reading external links lexical analysis lexical analysis the first phase compilation lexical analysis the source this phase involves grouping the characters into lexemes belong token classes such integer identifier whitespace token the form attribute produced for each lexical analysis also called scanning syntax analysis syntax analysis the second phase constructing compiler syntax the output lexical analyser used create representation which shows the grammatical structure the syntax analysis also called parsing history history compiler construction subfields parsing program analysis program transformation compiler program optimization code generation 