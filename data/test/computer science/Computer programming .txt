computer science
computer programming navigation search software development process software developer requirements specification architecture construction design testing debugging deployment maintenance methodologies waterfall prototype model incremental iterative model spiral scrum cleanroom rad dsdm agile lean dual vee model tdd bdd fdd ddd mdd configuration management documentation quality assurance project management user experience tools compiler debugger profiler gui designer modeling ide build automation computer programming often shortened programming process that leads from original formulation computing problem executable involves activities such understanding and generically solving such problems resulting algorithm verification requirements the algorithm including its correctness and its resource implementation commonly referred coding the algorithm target programming language testing debugging and maintaining the source code implementation the build system and management derived artefacts such machine code computer programs the algorithm often only represented parsable form and reasoned about using logic source code written one more programming languages such java python smalltalk javascript etc the purpose programming find sequence instructions that will automate performing specific task solve given the process programming thus often requires expertise many different including knowledge the application domain specialized algorithms and formal logic contents overview history modern programming quality requirements readability source code algorithmic complexity methodologies measuring language usage debugging programming languages programmers see also references further reading external links overview within software engineering programming the implementation regarded one phase software development process there going debate the extent which the writing programs art form craft engineering discipline good programming considered the measured application all with the goal producing efficient and evolvable software solution the criteria for efficient and evolvable vary the discipline differs from many other technical professions that programmers not need licensed pass any standardized governmentally certification tests order call themselves programmers even software because the discipline covers many which may may not include critical debatable whether licensing required for the profession most the discipline governed the entities which require the and sometimes very strict environments are defined united states air force use adacore and security however representing oneself professional software without license from accredited institution illegal many parts the world another going debate the extent which the programming language used writing computer programs affects the form that the final program citation needed this debate analogous that surrounding the sapir whorf hypothesis linguistics and cognitive science which postulates that particular spoken nature influences the habitual thought its different language patterns yield different patterns thought this idea challenges the possibility representing the world perfectly with because acknowledges that the mechanisms any language condition the thoughts its speaker history history programming languages ada lovelace algorithm ancient cultures had conception computing beyond arithmetic algebra and geometry occasionally aping elements calculus the method exhaustion the only mechanical device that existed for numerical computation the beginning human history was the abacus invented sumeria circa later the antikythera mechanism invented some time around ancient greece the first known mechanical calculator utilizing gears various sizes and configuration perform which tracked the metonic cycle still used solar and which consistent for calculating the dates the olympiads the kurdish medieval scientist jazari built programmable automata one system employed these devices was the use pegs and cams placed into wooden drum specific which would sequentially trigger levers that turn operated percussion instruments the output this device was small drummer playing various rhythms and drum the jacquard loom which joseph marie jacquard developed uses series pasteboard cards with holes punched the hole pattern represented the pattern that the loom had follow weaving the loom could produce entirely different weaves using different sets charles babbage adopted the use punched cards around control his analytical engine the first computer program was written for the analytical engine mathematician ada lovelace calculate sequence bernoulli numbers the synthesis numerical predetermined operation and along with way organize and input instructions manner relatively easy for humans conceive and led the modern development computer development computer programming accelerated through the industrial revolution punched cards the herman hollerith invented the recording data medium that could then read prior uses machine readable above had been for lists instructions not drive programmed machines such jacquard looms and mechanized musical instruments after some initial trials with paper settled punched cards process these punched first known hollerith invented the keypunch sorter and tabulator unit record machines these inventions were the foundation the data processing founded the tabulating machine company which later became the core ibm the addition control panel his type tabulator allowed different jobs without having physically the late there were several unit record such the ibm and ibm whose control panels specified sequence operations and thus were programmable the invention the von neumann architecture allowed computer programs stored computer memory early programs had painstakingly crafted using the instructions elementary the particular often binary notation every model computer would likely use different instructions machine language the same later assembly languages were developed that let the programmer specify each instruction text entering abbreviations for each operation code instead number and specifying addresses symbolic form add total entering program assembly language usually more faster and less prone human error than using machine but because assembly language little more than different notation for machine any two machines with different instruction sets also have different assembly ibm accounting machine fortran was was the first high level programming language have functional opposed just design level language very general any programming language that allows the programmer write programs terms that are more abstract than assembly language level abstraction higher than that assembly allowed programmers specify calculations entering formula directly the program source converted into machine instructions using special program called compiler which translates the fortran program into machine the name fortran stands for formula many other languages were including some for commercial such cobol programs were mostly still entered using punched cards paper tape see computer programming the punch card era the late data storage devices and computer terminals became inexpensive enough that programs could created typing directly into the text editors were developed that allowed changes and corrections made much more easily than with punched error punching card meant that the card had discarded and new one punched replace time has computers have made giant leaps the area processing this has brought about newer programming languages that are more abstracted from the underlying popular programming languages the modern era include actionscript haskell php java javascript objective perl python ruby smalltalk sql visual basic and dozens although these level languages usually incur greater overhead the increase speed modern computers has made the use these languages much more practical than the these increasingly abstracted languages typically are easier learn and allow the programmer develop applications much more efficiently and with less source however high level languages are still impractical for few such those where level hardware control necessary where maximum processing speed computer programming has become popular career the developed particularly the united states europe and japan due the high labor cost programmers these some forms programming have been increasingly subject offshore outsourcing importing software and services from other usually lower making programming career decisions developed countries more while increasing economic opportunities for programmers less developed particularly china and india modern programming this section relies largely entirely upon single source relevant discussion may found the talk page please help improve this article introducing citations additional august quality requirements whatever the approach development may the final program must satisfy some fundamental the following properties are among the most reliability how often the results program are this depends conceptual correctness and minimization programming such mistakes resource management buffer overflows and race conditions and logic errors such division zero off one errors robustness how well program anticipates problems due errors not this includes situations such inappropriate corrupt unavailability needed resources such operating system services and network user and unexpected power usability the ergonomics the ease with which person can use the program for its intended purpose some cases even unanticipated such issues can make break its success even regardless other this involves wide range graphical and sometimes hardware elements that improve the intuitiveness cohesiveness and completeness user portability the range computer hardware and operating system platforms which the source code program can interpreted and this depends differences the programming facilities provided the different including hardware and operating system expected behavior the hardware and operating and availability platform specific compilers and sometimes for the language the source maintainability the ease with which program can modified its present future developers order make improvements fix bugs and security holes adapt new good practices during initial development make the difference this this quality may not directly apparent the end user but can significantly affect the fate program over the long efficiency performance the amount system resources program consumes processor memory slow devices such network bandwidth and some extent even user the the this also includes careful management for example cleaning temporary files and eliminating memory leaks readability source code computer readability refers the ease with which human reader can comprehend the control and operation source affects the aspects quality including usability and most importantly readability important because programmers spend the majority their time trying understand and modifying existing source rather than writing new source unreadable code often leads inefficiencies and duplicated code study found that few simple readability transformations made code shorter and drastically reduced the time understand following consistent programming style often helps however readability more than just programming many having little nothing with the ability the computer efficiently compile and execute the contribute some these factors different indentation styles comments decomposition naming conventions for objects such classes procedures etc various visual programming languages have also been developed with the intent resolve readability concerns adopting traditional approaches code structure and algorithmic complexity the academic field and the engineering practice computer programming are both largely concerned with discovering and implementing the most efficient algorithms for given class for this algorithms are classified into orders using called big notation which expresses resource such execution time memory terms the size expert programmers are familiar with variety established algorithms and their respective complexities and use this knowledge choose algorithms that are best suited the methodologies the first step most formal software development processes requirements followed testing determine value implementation and failure elimination there exist lot differing approaches for each those one approach popular for requirements analysis use case analysis many programmers use forms agile software development where the various stages formal software development are more integrated together into short cycles that take few weeks rather than there are many approaches the software development popular modeling techniques include oriented analysis and design ooad and driven architecture mda the unified modeling language uml notation used for both the ooad and similar technique used for database design relationship modeling modeling implementation techniques include imperative languages object oriented procedural functional languages and logic languages measuring language usage very difficult determine what are the most popular modern programming some languages are very popular for particular kinds applications cobol still strong the corporate data citation needed often large mainframes fortran engineering scripting languages web development and embedded applications while some languages are regularly used write many different kinds also many applications use mix several languages their construction and new languages are generally designed around the syntax previous language with new functionality added for example adds orientedness and java adds memory management and bytecode and consequence loses efficiency and the ability for level methods measuring programming language popularity include counting the number job advertisements that mention the the number books sold and courses teaching the language this overestimates the importance newer and estimates the number existing lines code written the language this underestimates the number users business languages such debugging bug debugging very important task the software development process since having defects program can have significant consequences for its some languages are more prone some kinds faults because their specification does not require compilers perform much checking other use static code analysis tool can help detect some possible debugging often done with ides like eclipse kdevelop netbeans code blocks and visual studio standalone debuggers like gdb are also and these often provide less visual usually using command line programming languages programming language list programming languages different programming languages support different styles programming called programming paradigms the choice language used subject many such company suitability availability party individual ideally the programming language best suited for the task hand will trade offs from this ideal involve finding enough programmers who know the language build the availability compilers for that and the efficiency with which programs written given language languages form approximate spectrum from languages are typically more oriented and faster whereas languages are more abstract and easier use but execute less usually easier code languages than ones allen downey his book how think like computer scientist writes input gather data from the some other output display data the screen send data file other arithmetic perform basic arithmetical operations like addition and conditional check for certain conditions and execute the appropriate sequence repetition perform some action usually with some many computer languages provide mechanism call functions provided shared libraries provided the functions library follow the appropriate run time conventions method passing arguments then these functions may written any other programmers programmer software developer software engineer computer programmers are those who write computer their jobs usually coding debugging documentation integration maintenance requirements analysis software architecture software testing specification see also book programming computer science portal computing portal computer networking portal computer programming portal outline computer programming accu association for computing machinery computer networking computer science computing hello world program institution analysts and programmers system programming the art computer programming 