computer science
programming language theory navigation search this article includes list references but its sources remain unclear because has insufficient inline citations please help improve this article introducing more precise december greek lambda lambda calculus computational model alonzo church structure and interpretation computer programs lambda papers gerald jay sussman guy steele scheme programming language programming language theory plt branch computer science that deals with the implementation analysis characterization and classification programming languages and their individual features falls within the discipline computer science both depending and affecting mathematics software engineering and linguistics recognized branch computer and active research with results published numerous journals dedicated well general computer science and engineering contents history sub disciplines and related fields formal semantics type theory program analysis and transformation comparative programming language analysis generic and metaprogramming domain specific languages compiler construction run time systems journals publications and conferences see also references further reading external links history some the history programming language theory predates even the development programming languages the lambda calculus developed alonzo church and stephen cole kleene the considered some the first programming even though was intended model computation rather than being means for programmers describe algorithms computer many modern functional programming languages have been described providing thin over the lambda and many are easily described terms the first programming language proposed was plankalk which was designed konrad zuse the but not publicly known until and not implemented until the first widely known and successful programming language was fortran developed from team ibm researchers led john backus the success fortran led the formation committee scientists develop universal computer the result their effort was algol separately john mccarthy mit developed the lisp programming language based the lambda the first language with origins academia with the success these initial programming languages became active topic research the and some other key events the history programming language theory since noam chomsky developed the chomsky hierarchy the field linguistics discovery which has directly impacted programming language theory and other branches computer the simula language was developed ole johan dahl and kristen nygaard widely considered the first example object oriented programming language simula also introduced the concept coroutines peter landin the first realize church lambda calculus can used model programming introduces the secd machine which interprets lambda landin introduces the operator essentially form continuation landin introduces iswim abstract computer programming language his article the next programming languages influential the design languages leading the haskell programming corrado introduced the programming language cuch christopher strachey publishes his influential set lecture notes fundamental concepts programming languages introducing the terminology values values parametric polymorphism and hoc polymorphism roger hindley publishes the principal scheme object combinatory logic later generalized into the hindley milner type inference algorithm tony hoare introduces the hoare logic form axiomatic semantics william alvin howard observed that proof system referred natural deduction can directly interpreted its intuitionistic version typed variant the model computation known lambda calculus this became known the curry howard correspondence dana scott first publishes his work denotational semantics logic programming and prolog were developed thus allowing computer programs expressed mathematical john reynolds discovers system had already been discovered the mathematical logician jean yves girard from sussman and steele develop the scheme programming language lisp dialect incorporating lexical scoping unified and elements from the actor model including class continuations backus the acm turing award lecture assailed the current state industrial languages and proposed new class programming languages now known function level programming languages gordon plotkin introduces programming computable functions abstract typed functional robin milner introduces the hindley milner type inference algorithm for the programming language type theory became applied discipline programming this application has led tremendous advances type theory over the gordon plotkin publishes his paper structured operational semantics gilles kahn published his paper natural semantics team scientists xerox parc led alan kay develop smalltalk oriented language widely known for its innovative development there emerged process calculi such the calculus communicating systems robin milner and the communicating sequential processes model hoare well similar models concurrency such the actor model carl hewitt the release miranda sparks academic interest evaluated pure functional programming committee was formed define open standard resulting the release the haskell standard bertrand meyer created the methodology design contract and incorporated into the eiffel programming language gregor kiczales jim des rivieres and daniel bobrow published the book the art the metaobject protocol eugenio moggi and philip wadler introduced the use monads for structuring programs written functional programming languages sub disciplines and related fields there are several fields study which either lie within programming language which have profound influence many these have considerable plt makes use many other branches mathematics including computability theory category theory and set theory formal semantics formal semantics programming languages formal semantics the formal specification the behaviour computer programs and programming three common approaches describe the semantics meaning computer program are denotational semantics operational semantics and axiomatic semantics type theory type theory type theory the study type systems which are tractable syntactic method for proving the absence certain program behaviors classifying phrases according the kinds values they many programming languages are distinguished the characteristics their type program analysis and transformation program analysis program transformation program analysis the general problem examining program and determining key characteristics such the absence classes program errors program transformation the process transforming program one form another comparative programming language analysis comparative programming language analysis seeks classify programming languages into different types based their broad categories programming languages are often known programming paradigms generic and metaprogramming metaprogramming the generation order programs when produce programs possibly different subset the original domain specific languages domain specific languages are languages constructed efficiently solve problems particular problem compiler construction compiler construction compiler theory the theory writing compilers more translators programs which translate program written one language into another the actions compiler are traditionally broken into syntax analysis scanning and parsing semantic analysis determining what program should optimization improving the performance program indicated some typically execution and code generation generation and output equivalent program some target often the instruction set run time systems runtime systems refers the development programming language runtime environments and their including virtual machines garbage collection and foreign function interfaces journals publications and conferences conferences are the primary venue for presenting research programming the most well known conferences include the symposium principles programming languages conference programming language design and implementation the international conference functional programming and the international conference object oriented systems languages and applications oopsla notable journals that publish plt research include the acm transactions programming languages and systems journal functional programming journal functional and logic programming and higher order and symbolic computation see also sigplan timeline programming languages very level programming language 