computer science
theory computation navigation search this article needs additional citations for verification please help improve this article adding citations reliable sources unsourced material may challenged and september theoretical computer science and mathematics the theory computation the branch that deals with how efficiently problems can solved model computation using algorithm the field divided into three major automata theory computability theory and computational complexity theory order perform rigorous study computer scientists work with mathematical abstraction computers called model there are several models but the most commonly examined the turing machine computer scientists study the turing machine because simple can analyzed and used prove and because represents what many consider the most powerful possible reasonable model computation see church turing thesis might seem that the potentially infinite memory capacity unrealizable but any decidable problem solved turing machine will always require only finite amount any problem that can solved turing machine can solved computer that has bounded amount computability theory formal language theory contents history branches automata theory computability theory computational complexity theory models computation references further reading external links history the theory computation can considered the creation models all kinds the field computer therefore mathematics and logic are the last century became independent academic discipline and was separated from some pioneers the theory computation were alonzo church kurt del alan turing stephen kleene john von neumann and claude shannon branches automata theory automata theory automata theory the study abstract machines more abstract machines and the computational problems that can solved using these these abstract machines are called automata comes from the greek word which means that something doing something automata theory also closely related formal language the automata are often classified the class formal languages they are able automaton can finite representation formal language that may infinite computability theory computability theory computability theory deals primarily with the question the extent which problem solvable the statement that the halting problem cannot solved turing machine one the most important results computability example concrete problem that both easy formulate and impossible solve using turing much computability theory builds the halting problem another important step computability theory was rice theorem which states that for all trivial properties partial undecidable whether turing machine computes partial function with that computability theory closely related the branch mathematical logic called recursion theory which removes the restriction studying only models computation which are reducible the turing many mathematicians and computational theorists who study recursion theory will refer computability computational complexity theory computational complexity theory complexity theory considers not only whether problem can solved all but also how efficiently the problem can two major aspects are time complexity and space which are respectively how many steps does take perform and how much memory required perform that order analyze how much time and space given algorithm requires computer scientists express the time space required solve the problem function the size the input for finding particular number long list numbers becomes harder the list numbers grows say there are numbers the then the list not sorted indexed any way may have look every number order find the number thus say that order solve this the computer needs perform number steps that grows linearly the size the simplify this computer scientists have adopted big notation which allows functions compared way that ensures that particular aspects construction not need but rather only the asymptotic behavior problems become our previous example might say that the problem requires steps perhaps the most important open problem all computer science the question whether certain broad class problems denoted can solved this discussed further complexity classes and models computation model computation aside from turing machine other equivalent church turing thesis models computation are lambda calculus beta reduction combinatory logic recursive functions composition primitive recursion recursion markov algorithm string rewriting system grammar strings register machine del numbering number theoretical modular arithmetic brainfuck addition the general computational some simpler computational models are useful for restricted regular expressions for specify string patterns many from office productivity software programming languages another formalism mathematically equivalent regular finite automata are used circuit design and some kinds context free grammars specify programming language non deterministic pushdown automata are another formalism equivalent free primitive recursive functions are defined subclass the recursive different models computation have the ability different one way measure the power computational model study the class formal languages that the model can such way the chomsky hierarchy languages 