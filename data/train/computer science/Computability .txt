computer science	computability navigation search you might looking for computable function computability theory computation theory computation computability the ability solve problem effective key topic the field computability theory within mathematical logic and the theory computation within computer science the computability problem closely linked the existence algorithm solve the the most studied models computability are the turing computable and recursive functions and the lambda calculus all which have computationally equivalent other forms computability are studied computability notions weaker than turing machines are studied automata theory while computability notions stronger than turing machines are studied the field hypercomputation contents problems formal models computation power automata power finite state machines power pushdown automata power turing machines the halting problem beyond recursively enumerable languages concurrency based models stronger models computation infinite execution oracle machines limits computation see also references problems central idea computability that computational problem which task whose computability can there are two key types decision problem fixes set which may set natural other objects taken from some larger set particular instance the problem given element whether for let the set natural numbers and the set prime the corresponding decision problem corresponds primality testing function problem consists function from set set instance the problem given element the corresponding element for and may the set all finite binary and may take string and return the string obtained reversing the digits the input other types problems include search problems and optimization problems one goal computability theory determine which classes can solved each model formal models computation model computation model computation formal description particular type computational the description often takes the form abstract machine that meant perform the task general models computation equivalent turing machine church turing thesis include lambda calculus beta reduction combinatory logic recursive functions composition primitive recursion recursion string rewriting systems markov algorithm grammar strings post canonical system register machine del numbering number theoretical turing machine tape turing machine modular arithmetic brainfuck addition the general computational some simpler computational models are useful for restricted regular expressions for specify string patterns many from office productivity software programming languages another formalism mathematically equivalent regular finite automata are used circuit design and some kinds context free grammars specify programming language non deterministic pushdown automata are another formalism equivalent free different models computation have the ability different one way measure the power computational model study the class formal languages that the model can such way the chomsky hierarchy languages other restricted models computation deterministic finite automaton nondeterministic finite automaton pushdown automaton power automata with these computational models can determine what their limits that what classes languages can they power finite state machines this section may require cleanup meet quality standards cleanup reason has been please help improve this section you april computer scientists call any language that can accepted finite state machine regular language because the restriction that the number possible states finite state machine can see that find language that not must construct language that would require infinite number example such language the set all strings consisting the letters and which contain equal number the letter and see why this language cannot correctly recognized finite state assume first that such machine exists must have some number states now consider the string consisting followed reads there must some state the machine that repeated reads the first series since there are and only states the pigeonhole principle call this state and further let the number that our machine read order get from the first occurrence some subsequent occurrence during the sequence then that that second occurrence can add additional where and will again state this means that know that string must end the same state the string this implies that our machine accepts must also accept the string followed which not the language strings containing equal number and other cannot correctly distinguish between string equal number and and string with and therefore that this language cannot accepted correctly any finite state and thus not regular more general form this result called the pumping lemma for regular languages which can used show that broad classes languages cannot recognized finite state power pushdown automata computer scientists define language that can accepted pushdown automaton context free language which can specified context free grammar the language consisting strings with equal numbers and which showed was not regular can decided down also down automaton can behave just like state can decide any language which this model computation thus strictly more powerful than finite state however turns out there are languages that cannot decided down automaton the result similar that for regular and detailed there exists pumping lemma for free languages example such language the set prime power turing machines turing machines can decide any free addition languages not decidable down such the language consisting prime therefore strictly more powerful model because turing machines have the ability back their input possible for turing machine run for long time way that not possible with the other computation models previously possible construct turing machine that will never finish running some say that turing machine can decide language eventually will halt all inputs and give language that can decided called recursive language can further describe turing machines that will eventually halt and give answer for any input but which may run forever for input strings which are not the such turing machines could tell that given string the but may never sure based its behavior that given string not since may run forever such language which accepted such turing machine called recursively enumerable language the turing turns exceedingly powerful model attempts amend the definition turing machine produce more powerful machine have surprisingly met with for adding extra tape the turing giving dimensional infinite surface work with can all simulated turing machine with the basic dimensional these models are thus not more consequence the church turing thesis that there reasonable model computation which can decide languages that cannot decided turing the question ask then there exist languages which are recursively but not and furthermore are there languages which are not even recursively the halting problem halting problem the halting problem one the most famous problems computer because has profound implications the theory computability and how use computers everyday the problem can given description turing machine and its initial determine whether the when executed this ever halts the alternative that runs forever without here are asking not simple question about prime number but are instead turning the tables and asking turing machine answer question about another turing can shown see main halting problem that not possible construct turing machine that can answer this question all that the only general way know for sure given program will halt particular input all cases simply run and see does then you know however you may never know will eventually the language consisting all turing machine descriptions paired with all possible input streams which those turing machines will eventually not the halting problem therefore called computable undecidable extension the halting problem called rice theorem which states that undecidable whether given language possesses any specific nontrivial beyond recursively enumerable languages the halting problem easy however allow that the turing machine that decides may run forever when given input which representation turing machine that does not itself the halting language therefore recursively possible construct languages which are not even recursively however simple example such language the complement the halting that the language consisting all turing machines paired with input strings where the turing machines not halt their see that this language not recursively imagine that construct turing machine which able give definite answer for all such turing but that may run forever any turing machine that does eventually can then construct another turing machine that simulates the operation this along with simulating directly the execution the machine given the input interleaving the execution the two since the direct simulation will eventually halt the program simulating and since assumption the simulation will eventually halt the input program would never know that will eventually have one its parallel versions thus decider for the halting have previously however that the halting problem have and have thus shown that our assumption that exists the complement the halting language therefore not recursively concurrency based models number computational models based concurrency have been including the parallel random access machine and the petri net these models concurrent computation still not implement any mathematical functions that cannot implemented turing stronger models computation the church turing thesis conjectures that there effective model computing that can compute more mathematical functions than turing computer scientists have imagined many varieties hypercomputers models computation that beyond turing infinite execution zeno machine imagine machine where each step the computation requires half the time the previous normalize time unit the amount time required for the first the execution would require time this infinite series converges time which means that this turing machine can run infinite execution time this machine capable deciding the halting problem directly simulating the execution the machine any convergent series would assuming that the series converges value the turing machine would complete infinite execution time oracle machines oracle machine called oracle machines have access various oracles which provide the solution specific undecidable for the turing machine may have halting which answers immediately whether given turing machine will ever halt given these machines are central topic study recursion theory limits computation even these which seemingly represent the limit automata that could run into their own while each them can solve the halting problem for turing they cannot solve their own version the halting for oracle machine cannot answer the question whether given oracle machine will ever see also automata theory abstract machine list undecidable problems computational complexity theory computability logic important publications computability 