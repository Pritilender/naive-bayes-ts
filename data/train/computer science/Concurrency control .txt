computer science
concurrency control latest accepted revision accepted july navigation search information technology and computer science especially the fields computer programming operating systems multiprocessors and databases concurrency control ensures that correct results for concurrent operations are while getting those results quickly computer both software and hardware consist each component designed operate obey meet certain consistency when components that operate concurrently interact messaging sharing accessed data memory storage certain consistency may violated another the general area concurrency control provides methods design and theories maintain the consistency components operating concurrently while and thus the consistency and correctness the whole introducing concurrency control into system means applying operation constraints which typically result some performance operation consistency and correctness should achieved with good possible without reducing performance below reasonable concurrency control can require significant additional complexity and overhead concurrent algorithm compared the simpler sequential algorithm for failure concurrency control can result data corruption from torn read write operations contents concurrency control databases database transaction and the acid rules why concurrency control concurrency control mechanisms categories methods major goals concurrency control mechanisms correctness serializability recoverability distribution distributed serializability and commitment ordering distributed recoverability other major subjects attention recovery replication see also references footnotes concurrency control operating systems see also references concurrency control databases comments this section applicable all transactional all systems that use database transactions atomic transactions transactional objects systems management and networks smartphones which typically implement dedicated database not only purpose database management systems dbmss need deal also with concurrency control issues not typical just database transactions but rather operating systems these issues see concurrency control operating systems below are out the scope this concurrency control database management systems bernstein weikum and vossen other transactional objects and related distributed applications grid computing and cloud computing ensures that database transactions are performed concurrently without violating the data integrity the respective databases thus concurrency control essential element for correctness any system where two database transactions executed with time can access the same virtually any purpose database consequently vast body related research has been accumulated since database systems emerged the early well established concurrency control theory for database systems outlined the references mentioned serializability theory which allows effectively design and analyze concurrency control methods and alternative theory for concurrency control atomic transactions over abstract data types presented lynch and not utilized this theory more complex with wider and has been less utilized the database literature than the classical theory each theory has its pros and emphasis and insight some extent they are and their merging may ensure dbms usually guarantees that only serializable transaction schedules are unless serializability intentionally relaxed increase but only cases where application correctness not for maintaining correctness cases failed transactions which can always happen for many schedules also need have the recoverability from property dbms also guarantees that effect committed transactions and effect aborted rolled back transactions remains the related overall transaction characterization usually summarized the acid rules databases have become distributed needed cooperate distributed environments federated databases the early and cloud computing currently the effective distribution concurrency control mechanisms has received special database transaction and the acid rules database transaction acid the concept database transaction atomic transaction has evolved order enable both well understood database system behavior faulty environment where crashes can happen any and recovery from crash well understood database database transaction unit typically encapsulating number operations over database reading database writing acquiring etc abstraction supported database and also other each transaction has well defined boundaries terms which code executions are included that transaction determined the programmer via special transaction every database transaction obeys the following rules support the database database system designed guarantee them for the transactions atomicity either the effects all none its operations remain all semantics when transaction completed committed aborted respectively other the outside world committed transaction appears its effects the atomic and aborted transaction does not leave effects the database never consistency every transaction must leave the database consistent state maintain the predetermined integrity rules the database constraints upon and among the transaction must transform database from one consistent state another consistent state the responsibility the programmer make sure that the transaction itself performs correctly what intends perform from the point while the predefined integrity rules are enforced the thus since database can normally changed only all the states are aborted transaction does not change the database state has started never existed atomicity isolation transactions cannot interfere with each other end result their moreover usually depending concurrency control the effects incomplete transaction are not even visible another providing isolation the main goal concurrency durability effects successful transactions must persist through crashes typically recording the effects and its commit event non volatile memory the concept atomic transaction has been extended during the years what has become business transactions which actually implement types workflow and are not however also such enhanced transactions typically utilize atomic transactions why concurrency control transactions are executed serially sequentially with overlap transaction concurrency however concurrent transactions with interleaving operations are allowed uncontrolled some undesirable result may here are some typical the lost update second transaction writes second value item top first value written first concurrent and the first value lost other transactions running concurrently which their read the first the transactions that have read the wrong value end with incorrect the dirty read transactions read value written transaction that has been later this value disappears from the database upon and should not have been read any transaction dirty the reading transactions end with incorrect the incorrect summary while one transaction takes summary over the values all the instances repeated second transaction updates some instances that the resulting summary does not reflect correct result for any usually needed for precedence order between the two transactions one executed before the but rather some random depending the timing the and whether certain update results have been included the summary most performance transactional systems need run transactions concurrently meet their performance thus without concurrency control such systems can neither provide correct results nor maintain their databases concurrency control mechanisms categories the main categories concurrency control mechanisms optimistic delay the checking whether transaction meets the isolation and other integrity rules serializability and recoverability until its without blocking any its write operations and optimistic about the rules being and then abort transaction prevent the the desired rules are violated upon its aborted transaction immediately restarted and which incurs obvious overhead versus executing the end only not too many transactions are then being optimistic usually good pessimistic block operation may cause violation the until the possibility violation blocking operations typically involved with performance semi optimistic block operations some they may cause violation some and not block other situations while delaying rules checking done with different categories provide different different average transaction completion rates throughput depending transaction types computing level and other selection and knowledge about offs are then category and method should chosen provide the highest the mutual blocking between two transactions where each one blocks the more results deadlock where the transactions involved are stalled and cannot reach most optimistic mechanisms with are prone deadlocks which are resolved intentional abort stalled transaction which releases the other transactions that and its immediate restart and the likelihood deadlock typically blocking deadlocks and aborts all result performance and hence the offs between the methods many methods for concurrency control most them can implemented within either main category the major which have each many and some cases may overlap are locking two phase locking controlling access data locks assigned the access transaction data item database locked another transaction may blocked depending lock type and access operation until lock serialization graph checking also called precedence graph checking for cycles the graph and breaking them timestamp ordering assigning timestamps and controlling checking access data timestamp commitment ordering commit controlling checking chronological order commit events compatible with their respective precedence order other major concurrency control types that are utilized conjunction with the methods above multiversion concurrency control increasing concurrency and performance generating new version database object each time the object and allowing read operations several last relevant versions each depending scheduling index concurrency control synchronizing access operations indexes rather than user specialized methods provide substantial performance private workspace model deferred update each transaction maintains private workspace for its accessed and its changed data become visible outside the transaction only upon its commit weikum and vossen this model provides different concurrency control behavior with benefits many the most common mechanism type database systems since their early days the has been strong strict phase locking also called rigorous scheduling rigorous which special case both two phase locking and commitment ordering spite its long name for historical the idea the mechanism release all locks applied transaction only after the transaction has also the name the set all schedules that can generated this these are schedules have the property major goals concurrency control mechanisms concurrency control mechanisms firstly need operate maintain each integrity rules related application specific integrity rule are out the scope while transactions are running and thus the integrity the entire transactional correctness needs achieved with good performance increasingly need exists operate effectively while transactions are distributed over processes computers and computer networks other subjects that may affect concurrency control are recovery and replication correctness serializability serializability for common major goal most concurrency control mechanisms generating schedules with the serializability property without serializability undesirable phenomena may money may disappear from generated from serializability schedule means equivalence the resulting database some serial schedule with the same transactions which transactions are sequential with overlap and thus completely isolated from each concurrent access any two transactions the same data serializability considered the highest level isolation among database transactions and the major correctness criterion for concurrent some cases relaxed forms serializability are allowed for better performance the popular snapshot isolation mechanism meet availability requirements highly distributed systems see eventual consistency but only correctness not violated the relaxation relaxation allowed for money transactions since relaxation money can appear from almost all implemented concurrency control mechanisms achieve serializability providing conflict serializablity broad special case serializability enables most serializable and does not impose significant additional causing which can implemented recoverability recoverability serializability while the general area systems the term recoverability may refer the ability system recover from failure from forbidden within concurrency control database systems this term has received specific concurrency control typically also ensures the recoverability property schedules for maintaining correctness cases aborted transactions which can always happen for many recoverability from means that committed transaction schedule has read data written aborted such data disappear from the database upon the and are parts incorrect database reading such data violates the consistency rule unlike recoverability cannot relaxed any since any relaxation results quick database integrity violation upon the major methods listed above provide serializability none them its general form automatically provides and special considerations and mechanism enhancements are needed support commonly utilized special case recoverability strictness which allows efficient database recovery from failure but excludes optimistic strict cannot have optimistic but has optimistic ones comment note that the recoverability property needed even database failure occurs and database recovery from failure rather needed correctly automatically handle transaction which may unrelated database failure and recovery from distribution with the fast technological development computing the difference between local and distributed computing over low latency networks buses thus the quite effective utilization local techniques such distributed environments computer clusters and multi core processors however the local techniques have their limitations and use processes supported processors this often turns transactions into distributed they themselves need span these cases most local concurrency control techniques not scale distributed serializability and commitment ordering the neutrality this section disputed relevant discussion may found the talk page please not remove this message until the dispute resolved november distributed serializability serializability global serializability commitment ordering database systems have become distributed started cooperate distributed environments federated databases the early and nowadays grid computing cloud computing and networks with smartphones some transactions have become distributed transaction means that the transaction spans processes and may span computers and geographical this generates need effective distributed concurrency control mechanisms achieving the serializability property distributed schedule see distributed serializability and global serializability modular serializability effectively poses special challenges typically not met most the regular serializability originally designed operate this especially due need costly distribution concurrency control information amid communication and computer latency the only known general effective technique for distribution commitment which was disclosed publicly after being patented commitment ordering commit raz means that chronological order commit events kept compatible with their respective precedence order does not require the distribution concurrency control information and provides general effective solution reliable high and scalable for both distributed and global also heterogeneous environment with database systems other transactional with different concurrency control indifferent which mechanism since does not interfere with any transaction operation scheduling which most mechanisms and only determines the order commit thus enables the efficient distribution all other and also the distribution mix different local for achieving distributed and global the existence such solution has been considered unlikely until and many experts also due misunderstanding the solution see quotations global serializability important benefit automatic distributed deadlock resolution contrary virtually all other techniques when not combined with are prone distributed deadlocks also called global which need special also the name the resulting schedule schedule has the property the chronological order its commit events compatible with the respective precedence order mentioned above variant special and thus also effective achieve distributed and global also provides automatic distributed deadlock resolution fact overlooked the research literature even after well strictness and thus possessing these desired properties together with known efficient locking based implementations explains has been utilized efficiently achieve distributed and global serializability since the and has become the facto standard for however blocking and constraining and with the proliferation distribution and utilization systems different from traditional database systems cloud computing less constraining types optimistic may needed for better comments the distributed conflict serializability property its general form difficult achieve but achieved efficiently via its special case distributed each local component local needs both provide some form and enforce special vote ordering strategy for the two phase commit protocol utilized commit distributed transactions differently from the general distributed distributed exists automatically when all local components are based each component implied and the vote ordering strategy now met this fact has been known and utilized since the that exists without knowing about for efficient distributed which implies distributed serializability and strictness see raz page also implied bernstein page less constrained distributed serializability and strictness can efficiently achieved distributed strict mix based and sco based local about the references and commitment bernstein was published before the discovery the schedule property called dynamic atomicity lynch page described weikum and vossen pages but the description partial and misses essence raz was the first refereed and accepted for publication article about algorithms publications about equivalent dynamic atomicity property can traced other articles followed bernstein and newcomer note one the four major concurrency control and ability provide interoperability among other distributed recoverability unlike distributed recoverability and distributed strictness can achieved efficiently straightforward similarly the way distributed each database system they have applied and employ vote ordering strategy for the two phase commit protocol raz page has been mentioned distributed including distributed strictness and distributed commitment ordering automatically employs the needed vote ordering and achieved when employed locally each database system has been known and utilized for many matter fact locality defined the boundary participant raz other major subjects attention the design concurrency control mechanisms often influenced the following recovery data recovery all systems are prone and handling recovery from failure the properties the generated which are dictated the concurrency control may have impact the effectiveness and efficiency for the strictness property mentioned the section recoverability above often desirable for efficient replication replication computer for high availability database objects are often replicated updates replicas same database object need kept this may affect the way concurrency control done gray see also schedule isolation computer distributed concurrency control global concurrency control 