computer science
formal methods navigation search computer science specifically software engineering and hardware engineering formal methods are particular kind mathematically based techniques for the specification development and verification software and hardware systems the use formal methods for software and hardware design motivated the expectation other engineering performing appropriate mathematical analysis can contribute the reliability and robustness formal methods are best described the application fairly broad variety theoretical computer science fundamentals particular logic calculi formal languages automata theory and program semantics but also type systems and algebraic data types problems software and hardware specification and contents taxonomy lightweight formal methods elements requirement specifications project specifications project implementation details test specifications test results uses specification development verification human directed proof automated proof applications formal methods and notations see also references further reading external links taxonomy formal methods can used number level formal specification may undertaken and then program developed from this this has been dubbed formal methods lite this may the most effective option many level formal development and formal verification may used produce program more formal for proofs properties refinement from the specification program may this may most appropriate integrity systems involving safety security level theorem provers may used undertake fully formal checked this can very expensive and only practically worthwhile the cost mistakes extremely high critical parts microprocessor further information this expanded below with programming language semantics styles formal methods may roughly classified denotational semantics which the meaning system expressed the mathematical theory domains proponents such methods rely the understood nature domains give meaning the critics point out that not every system may intuitively naturally viewed operational semantics which the meaning system expressed sequence actions simpler computational proponents such methods point the simplicity their models means expressive critics counter that the problem semantics has just been delayed who defines the semantics the simpler axiomatic semantics which the meaning the system expressed terms preconditions and postconditions which are true before and after the system performs respectively proponents note the connection classical logic critics note that such semantics never really describe what system does merely what true before and lightweight formal methods some practitioners believe that the formal methods community has overemphasized full formalization specification they contend that the expressiveness the languages well the complexity the systems being make full formalization difficult and expensive various lightweight formal which emphasize partial specification and focused have been examples this lightweight approach formal methods include the alloy object modelling denney synthesis some aspects the notation with use case driven and the csk vdm tools elements formal methods consists the following basic requirement specifications these are usually developed close collaboration with the they are general nature regarding implementation but specific nature about elements the project such physicality performance inter project specifications these are usually developed the project they include the specification the project framework how the components are tied together how they communicate the component interfaces function call based and the component they form the specific details required the engineers implementing the components the project implementation details these are usually constructed the engineers constructing the these form description how the project was implemented individual component basis and system wide test specifications these have relationship the requirement these are often constructed test engineer and can consist test additional tests may also test results these indicate the results the tests software usually tested automated test and are used verify the formal methods projects are specification and test with any formal methods project there additional layer involving implementation standards and associated with software this coding standards not confused with coding uses formal methods can applied various points through the development process specification formal methods may used give description the system whatever detail this formal description can used guide further development activities see following additionally can used verify that the requirements for the system being developed have been completely and accurately the need for formal specification systems has been noted for the algol report john backus presented formal notation for describing programming language syntax later named backus normal form then renamed backus naur form backus also wrote that formal description the meaning syntactically valid algol programs completed time for inclusion the therefore the formal treatment the semantics legal programs will included subsequent never development once formal specification has been the specification may used guide while the concrete system developed during the design process realized typically but also potentially for the formal specification operational the observed behavior the concrete system can compared with the behavior the specification which itself should executable additionally the operational commands the specification may amenable direct translation into executable the formal specification axiomatic the preconditions and postconditions the specification may become assertions the executable verification once formal specification has been the specification may used the basis for proving properties the specification and hopefully inference the developed human directed proof sometimes the motivation for proving the correctness system not the obvious need for assurance the correctness the but desire understand the system consequently some proofs correctness are produced the style mathematical proof handwritten using natural language using level informality common such good proof one which readable and understandable other human critics such approaches point out that the ambiguity inherent natural language allows errors undetected such often subtle errors can present the level details typically overlooked such additionally the work involved producing such good proof requires high level mathematical sophistication and automated proof there increasing interest producing proofs correctness such systems automated automated techniques fall into two general automated theorem proving which system attempts produce formal proof from given description the set logical and set inference model checking which system verifies certain properties means exhaustive search all possible states that system could enter during its some automated theorem provers require guidance which properties are interesting enough while others work without human model checkers can quickly get bogged down checking millions uninteresting states not given sufficiently abstract proponents such systems argue that the results have greater mathematical certainty than produced since all the tedious details have been algorithmically the training required use such systems also less than that required produce good mathematical proofs making the techniques accessible wider variety critics note that some those systems are like oracles they make pronouncement yet give explanation that there also the problem verifying the verifier the program which aids the verification itself there may reason doubt the soundness the produced some modern model checking tools produce proof detailing each step their making possible given suitable independent applications formal methods are applied different areas hardware and including ethernet routing and security there are several examples which fms have been used verify the functionality the hardware and software used ibm used acl theorem amd processor development intel uses fms verify its hardware and firmware permanent software programmed into only there are several other projects nasa which fms are such next generation air transportation system unmanned aircraft system integration national airspace and airborne coordinated conflict resolution and detection formal verification has been frequently used hardware most the known hardware such intel and there are many areas where intel have used fms verify the working the such parameterized verification cache coherent intel core processor execution engine validation using theorem bdd and symbolic optimization for intel architecture using hol light theorem and verification high performance port gigabit ethernet controller with support for pci express protocol and intel advance management technology using similarly ibm has used formal methods the verification power registers and functional verification the ibm microprocessor formal methods and notations this section list format that may better presented using prose you can help converting this section appropriate editing help august there are variety formal methods and notations abstract state machines computational logic for applicative common lisp ansi iso specification language alloy autonomic system specification language method cadp common algebraic specification language java modeling language knowledge based software assistant process calculi csp lotos calculus actor model esterel lustre perfect developer petri nets predicative programming raise spark ada spec sharp specification and description language temporal logic actions usl vdm vdm notation rebeca modeling language spin pat powerful free model simulator and refinement checker for concurrent systems and csp extensions shared arrays fairness malpas software static analysis toolset industrial strength model checker used for formal proof safety critical systems uppaal see also automated theorem proving design contract formal methods people formal specification formal verification formal system model checking software engineering specification language 