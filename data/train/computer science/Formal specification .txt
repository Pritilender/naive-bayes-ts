computer science	formal specification navigation search computer science formal specifications are mathematically based techniques whose purpose are help with the implementation systems and they are used describe analyze its and aid its design verifying key properties interest through rigorous and effective reasoning these specifications are formal the sense that they have their semantics fall within one and they are able used infer useful contents motivation uses limitations paradigms software tools examples see also references external links motivation each passing decade computer systems have become increasingly more powerful and result they have become more impactful because better techniques are needed assist the design and implementation reliable established engineering disciplines use mathematical analysis the foundation creating and validating product formal specifications are one such way achieve this software engineering reliability once other methods such testing are more commonly used enhance code uses given such specification possible use formal verification techniques demonstrate that system design correct with respect its this allows incorrect system designs revised before any major investments have been made into actual another approach use provably correct refinement steps transform specification into which ultimately transformed into implementation that correct important note that formal specification not but rather may used develop implementation formal specifications describe what system should not how the system should good specification must have some the following adequate internally unambiguous complete satisfied minimal good specification will constructability manageability and evolvability usability communicability powerful and efficient analysis one the main reasons there interest formal specifications that they will provide ability perform proofs software these proofs may used validate verify correctness prove that program satisfies limitations design cannot ever declared its can only ever correct with respect given whether the formal specification correctly describes the problem solved separate also difficult issue since ultimately concerns the problem constructing abstracted formal representations informal concrete problem domain and such abstraction step not amenable formal however possible validate specification proving theorems concerning properties that the specification expected these theorems reinforce the understanding the specification and its relationship with the underlying problem the specification probably needs changed better reflect the domain understanding those involved with producing and the formal methods software development are not widely used most companies not consider effective apply them their software development this may for variety some which time high initial start cost with low measurable returns lot software companies use agile methodologies that focus doing formal specification the whole system front often perceived being the opposite however there some research into the benefits using formal specifications with agile development complexity they require high level mathematical expertise and the analytical skills understand and apply them effectively solution this would develop tools and models that allow for these techniques implemented but hide the underlying mathematics limited scope they not capture properties interest for all stakeholders the project they not good job specifying user interfaces and user interaction not this not entirely limiting their use only core parts critical systems they have shown effective other isolation level ontologies poor guidance poor separation concerns poor tool feedback paradigms formal specification techniques have existed various domains and various scales for quite some implementations formal specifications will differ depending what kind system they are attempting how they are applied and what point the software life cycle they have been these types models can categorized into the following specification history based specification behavior based system histories assertions are interpreted over time based specification behavior based system states series sequential financial languages such vdm rely this paradigm transition based specification behavior based transitions from state the system best used with reactive system languages such promela step rsml scr rely this paradigm functional specification specify system structure mathematical functions asl pluss larch hol pvs rely this paradigm operational specification early languages such paisley gist petri nets process algebras rely this paradigm addition the above paradigms there are ways apply certain heuristics help improve the creation these the paper referenced here best discusses heuristics use when designing they applying divide conquer approach software tools the notation example leading formal specification language others include the specification the vienna development method and the abstract machine notation the method the web services area formal specification often used describe functional properties web services quality service some tools algebraic larch obj lotos vdm csp petri nets examples for implementation refer the links software tools section see also algebraic specification formal methods specification technical software engineering specification language 