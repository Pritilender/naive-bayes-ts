computer science
logic programming navigation search this article may require cleanup meet quality standards cleanup reason has been please help improve this article you june programming paradigms action oriented oriented based concurrent computing relativistic programming driven declarative imperative constraint dataflow flow based oriented spreadsheets reactive functional functional logic abductive logic answer set constraint logic functional logic inductive logic user programming driven service oriented driven oriented oriented level value level generic imperative declarative procedural oriented natural language programming specific specific oriented dialecting intentional metaprogramming automatic reflective attribute oriented homoiconic template policy based structured structured array nondeterministic parallel computing process oriented free style concatenative semantic structured non structured block structured modular monolithic object oriented separation concerns aspect oriented oriented oriented based based recursive level function level probabilistic concept logic programming programming paradigm based formal logic program written logic programming language set sentences logical expressing facts and rules about some problem major logic programming language families include prolog answer set programming and datalog all these rules are written the form clauses and are read declaratively logical called the head the rule and called the body facts are rules that have and are written the simplified the simplest case which are all atomic these clauses are called definite clauses horn clauses however there exist many extensions this simple the most important one being the case which conditions the body clause can also negations atomic logic programming languages that include this extension have the knowledge representation capabilities non monotonic logic asp and logic programs have only declarative reading and their execution performed means proof procedure model generator whose behaviour not meant under the control the however the prolog family logic programs also have procedural interpretation reduction the declarative reading logic programs can used programmer verify their moreover logic based program transformation techniques can also used transform logic programs into logically equivalent programs that are more the prolog family logic programming the programmer can also use the known solving behaviour the execution mechanism improve the efficiency contents history prolog negation failure problem solving knowledge representation abductive logic programming metalogic programming constraint logic programming concurrent logic programming concurrent constraint logic programming inductive logic programming higher order logic programming linear logic programming object oriented logic programming transaction logic programming see also references general introductions other sources further reading external links history the use mathematical logic represent and execute computer programs also feature the lambda calculus developed alonzo church the however the first proposal use the clausal form logic for representing computer programs was made cordell green this used axiomatization subset lisp together with representation output compute the relation simulating the execution the program foster and absys the other employed combination equations and lambda calculus assertional programming language which places constraints the order which operations are citation needed logic programming its present form can traced back debates the late and early about declarative versus procedural representations knowledge artificial advocates declarative representations were notably working stanford associated with john mccarthy bertram raphael and cordell green and edinburgh with john alan robinson academic visitor from syracuse university pat hayes and robert kowalski advocates procedural representations were mainly centered mit under the leadership marvin minsky and seymour papert citation needed although was based the proof methods planner developed was the first language emerge within this proceduralist paradigm planner featured directed invocation procedural plans from goals goal reduction backward chaining and from assertions forward chaining the most influential implementation planner was the subset called implemented gerry sussman eugene charniak and terry winograd was used implement language understanding program shrdlu which was landmark that cope with the very limited memory systems the planner used backtracking control structure that only one possible computation path had stored planner gave rise the programming languages popler conniver qlisp and the concurrent language citation needed hayes and kowalski edinburgh tried reconcile the based declarative approach knowledge representation with procedural hayes developed equational golux which different procedures could obtained altering the behavior the theorem kowalski the other showed how resolution treats implications reduction kowalski collaborated with colmerauer who developed these ideas the design and implementation the programming language prolog prolog gave rise the programming languages alf fril del mercury ciao visual prolog xsb and prolog well variety concurrent logic programming languages see shapiro for constraint logic programming languages and datalog citation needed the association for logic programming was founded promote logic programming prolog prolog the programming language prolog was developed alain colmerauer emerged from collaboration between colmerauer marseille and robert kowalski colmerauer was working natural language understanding using logic represent semantics and using resolution for during the summer colmerauer and kowalski discovered that the clausal form logic could used represent formal grammars and that resolution theorem provers could used for they observed that some theorem like behave parsers and like resolution behave down was the following summer that again working with developed the procedural interpretation this dual procedural interpretation later became formalised the prolog notation which can read and both declaratively and also became clear that such clauses could restricted definite clauses horn clauses where are all atomic predicate logic and that resolution could restricted and lush sld resolution kowalski procedural interpretation and lush were described memo published colmerauer with philippe used this dual interpretation clauses the basis which was implemented the summer and autumn the first prolog also written and implemented was french answering the use prolog practical programming language was given great momentum the development compiler david warren edinburgh experiments demonstrated that edinburgh prolog could compete with the processing speed other symbolic programming languages such lisp edinburgh prolog became the facto standard and strongly influenced the definition iso standard negation failure negation failure for most practical well for applications that require monotonic reasoning artificial horn clause logic programs need extended normal logic with negative clause normal logic program has the and read declaratively logical where and all the and are atomic the negation the negative literals commonly referred negation failure because most negative condition shown hold showing that the positive condition fails micro planner had called thnot which when applied expression returns the value true and only the evaluation the expression equivalent operator normally modern prolog normally written goal goal where goal some goal proved the this operator differs from negation order negation such fails when the variable has been bound the atom but succeeds all other including when this makes reasoning non monotonic always while can binding depending whether was initially bound note that standard prolog executes goals right the logical status negation failure was unresolved until keith clark showed under certain natural correct and sometimes implementation classical negation with respect the completion the completion amounts roughly regarding the set all the program clauses with the same predicate the left hand say definition the predicate where iff means and only writing the completion also requires explicit use the equality predicate and the inclusion set appropriate axioms for however the implementation negation failure needs only the halves the definitions without the axioms the notion completion closely related circumscription semantics for default and the closed world assumption alternative the completion negation failure can also interpreted the stable model semantics answer set programming this interpretation means literally that not known not the epistemic interpretation has the advantage that can combined very simply with classical extended logic formalise such phrases the contrary can not where contrary classical negation and can not the epistemic interpretation negation problem solving the propositional case which logic program and level atomic goal contain backward reasoning determines and tree which constitutes the search space for solving the the level goal the root the given any node the tree and any clause whose head matches the there exists set child nodes corresponding the goals the body the these child nodes are grouped together and the alternative sets children corresponding alternative ways solving the node are grouped together any search strategy can used search this prolog uses last backtracking which only one alternative and one goal considered other search such parallel intelligent first search find optimal are also the more general where goals share other strategies can such choosing the subgoal that most highly instantiated that sufficiently instantiated that only one procedure such strategies are for concurrent logic programming the fact that there are alternative ways executing logic program has been characterised the slogan where logic represents logic program and control represents different proving knowledge representation the fact that horn clauses can given procedural interpretation vice that reduction procedures can understood horn clauses backward reasoning means that logic programs combine declarative and procedural representations knowledge the inclusion negation failure means that logic programming kind non monotonic logic despite its simplicity compared with classical this combination horn clauses and negation failure has proved surprisingly for has been shown with some further quite naturally the formal language also natural language for expressing sense laws cause and the situation calculus and event calculus abductive logic programming abductive logic programming extension normal logic programming that allows some declared abducible incompletely problem solving achieved deriving hypotheses expressed terms the abducible predicates solutions problems these problems can either observations that need explained classical abductive reasoning goals achieved normal logic has been used solve problems planning natural language and machine has also been used interpret negation failure form abductive metalogic programming because mathematical logic has long tradition distinguishing between object language and logic programming also allows metalevel the simplest metalogic program the called vanilla meta where true represents empty and means there level clause the form metalogic programming allows level and metalevel representations natural can also used implement any logic that specified means inference rules constraint logic programming constraint logic programming constraint logic programming combines horn clause logic programming with constraint solving extends horn clauses allowing some declared constraint occur literals the body constraint logic program set clauses the where and all the are atomic and the are declaratively such clauses are read ordinary logical however whereas the predicates the heads clauses are defined the constraint logic the predicates the constraints are predefined some specific theoretic structure procedurally subgoals whose predicates are defined the program are solved ordinary logic but constraints are checked for satisfiability specific which implements the semantics the constraint initial problem solved reducing satisfiable set constraint logic programming has been used solve problems such fields civil engineering mechanical engineering digital circuit verification automated timetabling air traffic control and closely related abductive logic programming concurrent logic programming concurrent logic programming concurrent logic programming integrates concepts logic programming with concurrent programming its development was given big impetus the its choice for the systems programming language the japanese fifth generation project concurrent logic program set guarded horn clauses the the conjunction called the guard the and the commitment declaratively guarded horn clauses are read ordinary logical however procedurally when there are several clauses whose heads match given then all the clauses are executed checking whether their guards hold the guards more than one clause then committed choice made one the and execution proceedes with the subgoals the chosen these subgoals can also executed thus concurrent logic programming implements form care rather than know arguably concurrent logic programming based message passing and consequently subject the same indeterminacy other concurrent passing such actors see indeterminacy concurrent computation carl hewitt citation needed has argued concurrent logic programming not based logic his sense that computational steps cannot logically deduced hewitt and however concurrent logic any result terminating computation logical consequence the and any partial result partial computation logical consequence the program and the residual goal process consequently the indeterminacy computations implies that not all logical consequences the program can concurrent constraint logic programming concurrent constraint logic programming concurrent constraint logic programming combines concurrent logic programming and constraint logic programming using constraints control clause can contain which set constraints that may block the applicability the when the guards several clauses are concurrent constraint logic programming makes committed choice the use only inductive logic programming inductive logic programming inductive logic programming concerned with generalizing positive and negative examples the context background machine learning logic recent work this combining logic learning and has given rise the new field statistical relational learning and probabilistic inductive logic programming higher order logic programming several researchers have extended logic programming with higher order programming features derived from higher order logic such predicate such languages include the prolog extensions hilog and prolog linear logic programming basing logic programming within linear logic has resulted the design logic programming languages that are considerably more expressive than those based classical horn clause programs can only represent state change the change arguments linear logic one can use the ambient linear logic support state some early designs logic programming languages based linear logic include andreoli pareschi lolli hodas miller acl kobayashi yonezawa and forum forum provides directed interpretation all linear object oriented logic programming logic extends logic programming with objects and the frame number systems are based including flora florid and highly scalable commercial system ontobroker transaction logic programming transaction logic extension logic programming with logical theory modifying has both theoretic semantics and procedural implementation subset transaction logic available the flora system other prototypes are also available see also boolean satisfiability problem constraint logic programming datalog functional programming inductive logic programming fuzzy logic logic computer science includes formal methods logic programming languages programming paradigm reasoning system satisfiability 