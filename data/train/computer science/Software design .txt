computer science	software design navigation search this article needs additional citations for verification please help improve this article adding citations reliable sources unsourced material may challenged and january this article about the activity between requirements and for the broader see software development software development process software developer requirements specification architecture construction testing debugging deployment maintenance methodologies waterfall prototype model incremental iterative model spiral scrum cleanroom rad dsdm agile lean dual vee model tdd bdd fdd ddd mdd configuration management documentation quality assurance project management user experience tools compiler debugger profiler gui designer modeling ide build automation software design the process which agent creates specification software artifact intended accomplish goals using set primitive components and subject constraints software design may refer either all the activities involved framing implementing commissioning and ultimately modifying complex the activity following requirements specification and before programming stylized software engineering software design usually involves problem solving and planning software solution this includes both level component and algorithm design and architecture design contents overview software design design principles design concepts design considerations modeling language design patterns usage see also references overview software design the process implementing software solutions one more set one the important parts software design the software requirements analysis part the software development process that lists specifications used software engineering the software user centered software design may involve user experience design yielding story board help determine those the software completely automated meaning user user interface software design may simple flow chart text describing planned sequence there are also standard methods like unified modeling language and fundamental modeling concepts either some documentation the plan usually the product the furthermore software design may platform independent platform specific depending the availability the technology used for the software design can considered creating solution problem hand with available the main difference between software analysis and design that the output software analysis consist smaller problems also the analysis should not very different even designed different team members the design focuses the and there can multiple designs for the same problem depending the environment that solution will they can operations webpages mobile even the new cloud computing sometimes the design depends the environment that was developed whether created from reliable frameworks implemented with suitable design patterns when designing two important factors consider are its security and software design design principles software design both process and the design process sequence steps that enable the designer describe all aspects the software important however that the design process not simply creative past sense what makes software and overall commitment quality are critical success factors for competent the design model the equivalent plans for begins representing the totality the thing built dimensional rendering the and slowly nes the thing provide guidance for constructing each detail the plumbing similarly the design model that created for software provides variety different views the computer basic design principles enable the software engineer navigate the design davis suggests set principles for software which have been adapted and extended the following the design process should not suffer from tunnel good designer should consider alternative judging each based the requirements the the resources available the the design should traceable the analysis because single element the design model often traces multiple necessary have means for tracking how requirements have been the design the design should not reinvent the systems are constructed using set design many which have likely been encountered these patterns should always chosen alternative time short and resources are design time should invested representing truly new ideas and integrating those patterns that already the design should minimize the intellectual between the software and the problem exists the real that the structure the software design should whenever mimic the structure the problem the design should exhibit uniformity and design uniform appears that one person developed the entire rules style and format should ned for design team before design work design integrated care taken ning interfaces between design the design should structured accommodate the design concepts discussed the next section enable design achieve this the design should structured degrade even when aberrant events operating conditions are well designed software should never should designed accommodate unusual and must terminate graceful design not coding not even when detailed procedural designs are created for program the level abstraction the design model higher than source the only design decisions made the coding level address the small implementation details that enable the procedural design the design should assessed for quality being not after the variety design concepts and design measures are available assist the designer assessing the design should reviewed minimize conceptual errors there sometimes tendency focus minutiae when the design missing the forest for the design team should ensure that major conceptual elements the design ambiguity inconsistency have been addressed before worrying about the syntax the design design concepts the design concepts provide the software designer with foundation from which more sophisticated methods can set fundamental design concepts has they abstraction abstraction the process result generalization reducing the information content concept observable typically order retain only information which relevant for particular refinement the process hierarchy developed decomposing macroscopic statement function wise fashion until programming language statements are each one several instructions given program are decomposed into more detailed abstraction and refinement are complementary modularity software architecture divided into components called software architecture refers the overall structure the software and the ways which that structure provides conceptual integrity for good software architecture will yield good return investment with respect the desired outcome the terms quality schedule and control hierarchy program structure that represents the organization program component and implies hierarchy structural partitioning the program structure can divided both horizontally and horizontal partitions define separate branches modular hierarchy for each major program vertical partitioning suggests that control and work should distributed top down the program data structure representation the logical relationship among individual elements software procedure focuses the processing each modules individually information hiding modules should specified and designed that information contained within module inaccessible other modules that have need for such information design considerations there are many aspects consider the design piece the importance each should reflect the goals the software trying some these aspects compatibility the software able operate with other products that are designed for interoperability with another for piece software may compatible with older version extensibility new capabilities can added the software without major changes the underlying fault tolerance the software resistant and able recover from component maintainability measure how easily bug fixes functional modifications can high maintainability can the product modularity and modularity the resulting software comprises well independent that leads better the components could then implemented and tested isolation before being integrated form desired software this allows division work software development reliability the software able perform required function under stated conditions for specified period reusability the software able add further features and modification with slight robustness the software able operate under stress tolerate unpredictable invalid for can designed with resilience low memory security the software able withstand hostile acts and usability the software user interface must usable for its target default values for the parameters must chosen that they are good choice for the majority the performance the software performs its tasks within acceptable the software does not consume too much portability the usability the same software different scalability the software adapts well increasing data number modeling language modeling language any artificial language that can used express information knowledge systems structure that defined consistent set the rules are used for interpretation the meaning components the modeling language can graphical examples graphical modeling languages for software design business process modeling notation example process modeling language express and iso international standard purpose data modeling language extended enterprise modeling language commonly used for business process modeling across number flowchart schematic representation algorithm wise fundamental modeling concepts modeling language for intensive idef family modeling the most notable which include idef for functional idef for information and idef for modeling jackson structured programming method for structured programming based correspondences between data stream structure and program structure object oriented visual design description language and formal specification language that suitable primarily for modelling large oriented java programs and design patterns unified modeling language general modeling language describe software both structurally and has graphical notation and allows for extension with profile alloy specification general purpose specification language for expressing complex structural constraints and behavior software provides concise language based order relational systems modeling language new general purpose modeling language for systems design patterns software designer architect may identify design problem which has been solved others template pattern describing solution common problem known design pattern the reuse such patterns can speed the software development having been tested and proven the usage software design documentation may reviewed presented allow specifications and even requirements adjusted prior computer programming redesign may occur after review programmed simulation prototype possible design software the process without plan requirement but for more complex projects this would not considered professional separate design prior programming allows for multidisciplinary designers and subject matter experts collaborate with highly skilled programmers for software that both useful and technically making robots also huge use software design see also software design oriented software development bachelor science information technology design rationale interaction design icon design based software engineering software design description ieee software development user experience user interface design zero one infinity 