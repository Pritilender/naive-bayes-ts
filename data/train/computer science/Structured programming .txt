computer science	structured programming navigation search this article needs additional citations for verification please help improve this article adding citations reliable sources unsourced material may challenged and january programming paradigms action oriented oriented based concurrent computing relativistic programming driven declarative imperative constraint dataflow flow based oriented spreadsheets reactive functional functional logic logic abductive logic answer set constraint logic functional logic inductive logic user programming driven service oriented driven oriented oriented level value level generic imperative declarative procedural oriented natural language programming specific specific oriented dialecting intentional metaprogramming automatic reflective attribute oriented homoiconic template policy based structured array nondeterministic parallel computing process oriented free style concatenative semantic non structured block structured modular monolithic object oriented separation concerns aspect oriented oriented oriented based based recursive level function level probabilistic concept structured programming programming paradigm aimed improving the quality and development time computer program making extensive use subroutines block structures and for and while loops contrast using simple tests and jumps such the goto statement which could lead spaghetti code which difficult both follow and emerged the particularly from jacopini and famous statement considered harmful from edsger dijkstra and was bolstered theoretically the structured program theorem and practically the emergence languages such algol with suitably rich control structures contents elements control structures subroutines blocks structured programming languages history theoretical foundation debate outcome common deviations early exit exception handling multiple entry state machines see also references external links elements control structures following the structured program all programs are seen composed three control structures sequence ordered statements subroutines executed selection one number statements executed depending the state the this usually expressed with keywords such iteration statement block executed until the program reaches certain operations have been applied every element this usually expressed with keywords such often recommended that each loop should only have one entry point and the original structural also only one exit and few languages enforce diagrams flow charts subroutines subroutines callable units such functions methods subprograms are used allow sequence referred single blocks blocks are used enable groups statements treated they were one block structured languages have syntax for enclosing structures some formal such statement bracketed algol code section bracketed whitespace indentation python the curly braces and many later languages structured programming languages possible structured programming any programming though preferable use something like procedural programming language some the languages initially used for structured programming languages algol pascal and ada but most new procedural programming languages since that time have included features encourage structured and sometimes deliberately left out features notably goto effort make unstructured programming more history theoretical foundation the structured program theorem provides the theoretical basis structured states that three ways combining selection and are sufficient express any computable function this observation did not originate with the structured programming these structures are sufficient describe the instruction cycle central processing unit well the operation turing machine therefore processor always executing structured this even the instructions reads from memory are not part structured however authors usually credit the result paper and possibly because dijkstra cited this paper the structured program theorem does not address how write and analyze usefully structured these issues were addressed during the late and early with major contributions dijkstra robert floyd tony hoare ole johan dahl and david gries debate plauger early adopter structured described his reaction the structured program donald knuth accepted the principle that programs must written with provability but disagreed and still disagrees citation needed with abolishing the goto his paper structured programming with goto gave examples where believed that direct jump leads clearer and more efficient code without sacrificing knuth proposed looser structural should possible draw flow chart with all forward branches the all backward branches the and branches crossing each many those knowledgeable compilers and graph theory have advocated allowing only reducible flow graphs when defined who structured programming theorists gained major ally the after ibm researcher harlan mills applied his interpretation structured programming theory the development indexing system for the new york times research the project was great engineering and managers other companies cited support adopting structured although dijkstra criticized the ways that interpretation differed from the published late was still possible raise the question structured programming computer science frank rubin did that year with goto considered considered numerous objections including response from dijkstra that sharply criticized both rubin and the concessions other writers made when responding outcome the end the century nearly all computer scientists were convinced that useful learn and apply the concepts structured high level programming languages that originally lacked programming such fortran cobol and basic now have common deviations while goto has now largely been replaced the structured constructs selection and repetition while and few languages are purely the most common found many the use return statement for early exit from this results multiple exit instead the single exit point required structured there are other constructions handle cases that are awkward purely structured early exit the most common deviation from structured programming early exit from function the level this statement the level this statement terminate the statement terminate the current proceed with next structured these can replicated adding additional branches but for returns from nested code this can add significant early and prominent example these some newer languages also have labeled which allow breaking out more than just the innermost exceptions also allow early but have further and thus are treated multiple exits can arise for variety most often either that the subroutine has more work returning has completed the has encountered exceptional circumstances that prevent from hence needing exception the most common problem early exit that cleanup final statements are not executed for allocated memory not open files are not causing memory leaks resource leaks these must done each return which brittle and can easily result for later return statement could overlooked and action which should performed the end subroutine trace statement might not performed all languages without return such standard pascal don have this most modern languages provide level support prevent such see detailed discussion resource management most commonly this done via unwind which ensures that certain code guaranteed run when execution exits this structured alternative having cleanup block and this most often known and considered part exception handling various techniques exist encapsulate resource alternative found primarily resource acquisition initialization which uses normal stack unwinding variable function exit call destructors local variables deallocate kent beck martin fowler and authors have argued their refactoring books that nested conditionals may harder understand than certain type flatter structure using multiple exits predicated guard clauses their book flatly states that one exit point really not useful clarity the key the method clearer with one exit use one exit otherwise they offer cookbook solution for transforming function consisting only nested conditionals into sequence guarded return statements followed single unguarded which intended contain the code for the common while the guarded statements are supposed deal with the less common ones with his textbook david watt writes that entry exit control flows are often using framework notion sequencer watt uniformly describes the control flow constructs found contemporary programming languages and attempts explain why certain types sequencers are preferable others the context exit control watt writes that unrestricted gotos jump are bad because the destination the jump not explanatory the reader program until the reader finds and examines the actual label address that the target the watt argues that the conceptual intent return sequencer clear from its own without having examine its watt writes that class sequencers known escape sequencers defined sequencer that terminates execution textually enclosing command encompasses both breaks from loops including level and return watt also notes that while jump sequencers have been somewhat restricted languages like where the target must inside the local block encompassing outer that restriction alone not sufficient make the intent gotos describing and they can still produce spagetti code watt also examines how exception sequencers differ from escape and jump this explained the next section this exception handling based the coding error from the ariane disaster software developer jim bonang argues that any exceptions thrown from function violate the exit and propose that all procedural exceptions should syntax this done declaring all function signatures bonang proposes that all exit conforming should written along the lines bool throw bool false try something that may throw exceptions false throw other code similar the above true catch all exceptions caught and logged return msmvp peter ritchie also notes even single right before the function constitutes violation the exit but argues that rules were written time before exception handling became paradigm programming proposes allow any number throw points addition single return notes that solutions which wrap exceptions for the sake creating exit have higher nesting depth and thus are more difficult and even accuses those who propose apply such solutions programming languages which support exceptions engaging cargo cult thinking david watt also analyzes exception handling the framework sequencers introduced this article the previous section early watt notes that abnormal situation generally exemplified with arithmetic overflows output failures like file not kind error that detected some level program but for handler more naturally located level program for program might contain several calls read but the action perform when file not found depends the meaning the file question the program and thus handling routine for this abnormal situation cannot located level system watts further notes that introducing status flags testing the exit structured programming even return sequencers would results situation where the application code tends get cluttered tests status and that the programmer might forgetfully lazily omit test status abnormal situations represented status flags are default notes that contrast status flags exceptions have the opposite default behavior causing the program terminate unless the programmer explicitly deals with the exception some possibly adding code willfully ignore based these watt concludes that jump sequencers escape sequencers discussed the previous aren suitable dedicated exception sequencer with the semantics discussed the textbook louden and lambert emphasizes that exception handling differs from structured programming constructs like loops because the transfer control set different point the program than that where the actual transfer takes the point where the transfer actually there may syntactic indication that control will fact computer science professor arvind kumar bansal also notes that languages which implement exception even control structures like which have the exit property absence longer have presence because exception can prematurely cause early exit any part the control for instance throws exception then the usual exit point after not citing multiple prior studies others and their own westley weimer and george necula wrote that significant problem with exceptions that they create hidden flow paths that are difficult for programmers reason the necessity limit code exit points appears some contemporary programming environments focused parallel such openmp the various parallel constructs from like not allow early exits from inside the outside the parallel this restriction includes all manner from exceptions but all these are permitted inside the parallel construct the jump target also inside computer science professor arvind kumar bansal also notes that languages which implement exception even control structures like which have the exit property absence longer have presence because exception can prematurely cause early exit any part the control for instance throws exception then the usual exit point after not multiple entry coroutine more subprograms allow multiple entry this most commonly only entry into coroutine generator where subprogram yields control and possibly but can then resumed where left there are number common uses such notably for streams particularly state and from code execution point yielding from coroutine closer structured programming than returning from the subprogram has not actually and will continue when called again not early however coroutines mean that multiple subprograms have execution state rather than single call stack subroutines and thus introduce different form very rare for subprograms allow entry arbitrary position the this case the program state such variable uninitialized and this very similar state machines some particularly parsers and communications protocols have number states that follow each other way that not easily reduced the basic and some programmers including knuth citation needed implement the changes with jump the new however possible structure these systems making each change separate subprogram and using variable indicate the active state see trampoline alternatively these can implemented via which dispense with the see also control flow more detail level control minimal evaluation oriented programming shneiderman diagram programming paradigms structured exception handling structure chart switch statement case multiple gotos 