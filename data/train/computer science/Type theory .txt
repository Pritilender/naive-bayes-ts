computer science	type theory navigation search mathematics logic and computer science type theory any class formal systems some which can serve alternatives set theory foundation for all type every term has type and operations are restricted terms certain type theory closely related and some cases overlaps type systems which are programming language feature used reduce bugs the types type theory were created avoid paradoxes variety formal logics and rewrite systems and sometimes type used refer this broader two known type theories that can serve mathematical foundations are alonzo church typed calculi and per intuitionistic type theory contents history basic concepts difference from set theory optional features normalization dependent types equality types identity inductive types universe types computational component systems type theory major minor active practical impact programming languages mathematical foundations proof assistants linguistics social sciences relation category theory see also references further reading external links history history type theory the types type theory were invented bertrand russell response his discovery that gottlob frege version naive set theory was afflicted with russell paradox this theory types features prominently whitehead and russell principia mathematica avoids paradox first creating hierarchy then assigning each mathematical and possibly entity objects given type are built exclusively from objects preceding types those lower the thus preventing the common usage type when those types are used with term rewrite system the most famous early example alonzo church lambda calculus church theory types helped the formal system avoid the kleene rosser paradox that afflicted the original untyped lambda church demonstrated that could serve foundation mathematics and was referred higher order logic some other type theories include per intuitionistic type theory which has been the foundation used some areas constructive mathematics and for the proof assistant agda thierry coquand calculus constructions and its derivatives are the foundation used coq and the field area active demonstrated homotopy type theory basic concepts system type each term has type and operations are restricted terms certain typing judgment describes that the term has type for may type representing the natural numbers and may inhabitants that the judgement that has type written function type theory denoted with arrow the function commonly called successor has the judgement calling applying function argument usually written without instead see currying for type theories also contain rules for rewriting these are called conversion rules the rule only works one reduction rule for and are syntactically different but the first reduces the this reduction denoted difference from set theory there are many different set theories and many different systems type what follows are set theory built top requires separate system like underneath type concepts like and and can encoded types the type theory set element can belong multiple either subset type terms belong only one where subset would type theory creates new called dependent sum type with new union similarly achieved new sum type and new set sets can contain unrelated apples and real type types that combine unrelated types creating new set theory usually encodes numbers the empty set containing the empty etc type theory can encode numbers functions using church encoding more naturally inductive types which are type with behaved constant set theory allows set builder notation type theory has simple connection constructive mathematics through the bhk interpretation optional features normalization the term reduces since cannot reduced called normal form system type theory said strongly normalizing all terms have normal form and any order reductions reaches weakly normalizing systems have normal form but some orders reductions may loop forever and never reach for normalizing some borrow the word element from set theory and use refer all closed terms that can reduce the same normal closed term one without term like with its parameter called open term thus and may different terms but both from the element similar idea that works for open and closed terms two terms are convertible there exists term that they both reduce for and are are and however and where free are not because both are normal form and they are not the confluent and weakly normalizing systems can test two terms are convertible checking they both reduce the same normal dependent types dependent types dependent type type that depends term another thus the type returned function may depend upon the argument the for list length may different type than list length type theory with dependent possible define function that take parameter and returns list containing zeros calling the function with would produce term with different type than the function was called with dependent types play central role intuitionistic type theory and the design functional programming languages like idris ats agda and epigram equality types identity many systems type theory have type that represents equality types and this type different from and often denoted propositional equality intuitionistic type the dependent type known for there type when type and and are both terms type term type interpreted meaning that equal possible build type but there will not exist term that intuitionistic type new terms equality start with term type then there exists term type more complicated equalities can created creating reflexive term and then doing reduction one term type then there term type and generate term type thus this the equality type denotes that two values the same type are convertible having type for equality important because can manipulated inside the there usually judgement say two terms are not equal instead the brouwer kolmogorov interpretation map where the bottom type having there exists term with type but not one type homotopy type theory differs from intuitionistic type theory mostly its handling the equality inductive types inductive type system type theory requires some basic terms and types operate some systems build them out functions using church encoding other systems have inductive types set base types and set type constructors that generate types with behaved for certain recursive functions called inductive types are guaranteed coinductive type are infinite data types created giving function that generates the next see coinduction and corecursion induction induction feature for declaring inductive type and family types that depends the inductive induction recursion allows wider range behaved types but requires that the type and the recursive functions that operate them defined the same universe types types were created prevent such russell paradox however the motives that lead those paradoxes being able say things about all types still many type theories have universe which contains all other systems where you might want say something about universe there hierarchy universe each containing the one below the the hierarchy defined being but statements must only refer finite number universe type universes are particularly tricky type the initial proposal intuitionistic type theory suffered from girard paradox computational component many systems type such the simply typed lambda calculus intuitionistic type theory and the calculus constructions are also programming that they are said have computational the computation the reduction terms the language using rewriting rules system type theory that has behaved computational component also has simple connection constructive mathematics through the bhk interpretation non constructive mathematics these systems possible adding operators continuations such call with current continuation however these operators tend break desirable properties such canonicity and parametricity systems type theory major simply typed lambda calculus which higher order logic intuitionistic type theory system often used define other type theories calculus constructions and its derivatives minor automath some forms combinatory logic type theory others defined the lambda cube others under the name typed lambda calculus others under the name pure type system active homotopy type theory being researched practical impact programming languages type system there extensive overlap and interaction between the fields type theory and type type systems are programming language feature designed identify any static program such the type checking algorithms the semantic analysis phase compiler has connection type prime example agda programming language which uses intuitionistic type theory for its type the programming language was developed for manipulating type theories see lcf and its own type system was heavily influenced mathematical foundations this section requires expansion may the first computer proof called automath used type theory encode mathematics martin specifically developed intuitionistic type theory encode all mathematics serve new foundation for there current research into mathematical foundations using homotopy type theory mathematicians working category theory already had difficulty working with the widely accepted foundation zermelo fraenkel set theory this led proposals such elementary theory the category sets homotopy type theory continues this line using type researchers are exploring connections between dependent types especially the identity and algebraic topology specifically homotopy proof assistants proof assistant much the current research into type theory driven proof checkers interactive proof assistants and automated theorem provers most these systems use type theory the mathematical foundation for encoding this not given the close connection between type theory and programming used twelf often define other type theories multiple type theories falling under higher order logic are used the hol family provers and pvs intuitionistic type theory used agda which both programming language and proof computational type theory used nuprl the calculus constructions and its derivatives are used coq and matita multiple type theories are supported lego and isabelle isabelle also supports foundations besides type such zfc mizar example proof system that only supports set linguistics type theory also widely use formal theories semantics natural languages especially montague grammar and its categorial grammars and pregroup grammars make extensive use type constructors define the types noun verb etc the most common construction takes the basic types and for individuals and truth values respectively and defines the set types recursively and are then nothing except the basic and what can constructed from them means the previous clause are complex type the type functions from entities type entities type thus one has types like which are interpreted elements the set functions from entities indicator functions sets expression type function from sets entities indicator function set this latter type standardly taken the type natural language quantifiers like everybody nobody montague barwise and cooper social sciences gregory bateson introduced theory logical types into the social his notions double bind and logical levels are based theory relation category theory although the initial motivation for category theory was far removed from the two fields turned out have deep john lane bell writes fact categories can themselves viewed type theories certain this fact alone indicates that type theory much more closely related category theory than set category can viewed type theory regarding its objects types roughly category may thought type theory shorn its number significant results follow this cartesian closed categories correspond the typed calculus lambek monoids categories with products and exponentials and nonterminal correspond the untyped calculus observed independently lambek and dana scott around locally cartesian closed categories correspond martin type theories the known categorical logic has been subject active research since see the monograph jacobs for see also data type for concrete types data programming domain theory type model type system for more practical discussion type systems for programming languages 